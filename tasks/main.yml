---
- set_fact:
    _supported_ubuntu_versions:
      - '18.04'
      - '20.04'
      - '22.04'

- name: Check if OS is Ubuntu LTS
  assert:
    that:
      - ansible_distribution == 'Ubuntu'
      - ansible_distribution_version in _supported_ubuntu_versions
    fail_msg: Server must be Ubuntu LTS

- name: Make sure dirmngr is present so gnupg doesn't choke when we try to add Ondrej PHP PPA
  apt:
    name: dirmngr
    state: present

- name: Add ondrej repo to allow multiple PHP versions
  apt_repository:
    repo: "ppa:ondrej/php"
    update_cache: yes

- name: Debug php_versions
  debug:
    var: php_versions
#    verbosity: 1

- name: Include php version specific playbook (< 8.1)
  include_tasks: "php{{ item }}.yml"
  when: item is version(8.1, '<')
  with_items: "{{ php_versions }}"

- name: Include php version agnostic playbook (>= 8.1)
  include_tasks: "php_any.yml"
  vars:
    php_version: "{{ item }}"
  when: item is version(8.1, '>=')
  with_items: "{{ php_versions }}"

- name: Check for existence of /etc/acro/add-website.conf
  stat: path=/etc/acro/add-website.conf.php{{ php_default_version }}
  register: add_website_conf
  tags:
    - acroutils

- name: Let acro-add-website.sh know which PHP version ({{ php_default_version }}) to use
  file:
    state: link
    src: /etc/acro/add-website.conf.php{{ php_default_version }}
    dest: /etc/acro/add-website.conf
  when: add_website_conf is defined
    and add_website_conf.stat is defined
    and add_website_conf.stat.exists
  tags:
    - acroutils

- name: Determine the current default PHP CLI version
  shell: |
    set -o pipefail
    /usr/bin/php -v | grep '^PHP '
  args:
    executable: /bin/bash
  register: php_installed_default_version
  failed_when: false
  changed_when: false

- name: Debug php_installed_default_version
  debug:
    var: php_installed_default_version
    verbosity: 1

- name: Debug php_default_version
  debug:
    var: php_default_version
    verbosity: 1

- name: Debug regex search
  debug:
    msg: '{{ php_installed_default_version.stdout | regex_search("PHP " + (php_default_version|string)) }}'
    verbosity: 1

- name: Set default CLI PHP version (PHP CLI) when the running default version does not match the desired default version.
  shell: update-alternatives --set php /usr/bin/php{{ php_default_version }}
  when: php_installed_default_version is defined
    and php_installed_default_version.stdout is defined
    and (not php_installed_default_version.stdout | regex_search("PHP " + (php_default_version|string|regex_escape())))
